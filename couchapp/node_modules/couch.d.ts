declare global {
    /** Emits a key-value pair for further processing by CouchDB after the map function is done. */
    export function emit(key: any, value: any);

    /** Registers callable handler for specified MIME key. */
    export function provides(key: string, handler: Function);

    /** Initiates chunked response. As an option, a custom response object may be sent at this point. For list-functions only! */
    export function start(init_resp?: {});

    /** Sends a single string chunk in response. */
    export function send(chunk: string);

    /** Extracts the next row from a related view result. */
    export function getRow(): Row | null;
}

export interface Row {
    key: any,
    value: any,
}

interface CouchDoc {
    _id: string,
    _rev?: string,
    _deleted?: boolean,
}

export interface DesignDoc extends CouchDoc {
    views?: {},
    lists?: {},
    shows?: {},
    updates?: {},
    lib?: {},
    vendor?: {},
    validate_doc_update?: validatefun,
}

export type validatefun = (newDoc: {}, oldDoc: {}, userCtx?: UserContextObject, secObj?: SecurityObject) => void;

export interface UserContextObject {
    db: string,
    name?: string,
    roles: string[],
}

export interface SecurityObject {
    admins: SecurityObjectEntry,
    members: SecurityObjectEntry,
}

export interface SecurityObjectEntry {
    roles: string[],
    names: string[],
}

export interface Request {
    body: string,
    cookie: any,
    form: any,
    headers: any,
    id?: string,
    info: {},
    method: string,
    path: string[],
    peer: string,
    query: any,
    requested_path: string[],
    raw_path: string,
    secObj: SecurityObject,
    userCtx: UserContextObject,
    uuid: string,
}

export interface Response {
    code: number,
    json?: {},
    body?: string,
    base64?: string,
    headers?: {},
    stop?: boolean,
}

